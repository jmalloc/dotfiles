[user]
    name = James Harris
    email = contact@jamesharris.id.au

[core]
    autocrlf = input
    excludesfile = ~/.gitignore.global
    whitespace = trailing-space,space-before-tab,tabwidth=4
    pager = /opt/homebrew/opt/git/share/git-core/contrib/diff-highlight/diff-highlight | less

[commit]
    cleanup = scissors

[include]
    path = ~/.gitconfig.private

[diff]
    renames = true

[fetch]
    prune = true

[help]
    autocorrect = 10

[pull]
    ff = only

[tag]
    sort = version:refname

[color "diff"]
    meta = dim
    frag = dim
    old = red
    new = green

[color "status"]
    added = green
    changed = yellow
    untracked = red

[format]
    pretty = "%C(dim cyan)%h%C(reset) %C(yellow)|%C(reset) %s%C(cyan)%d%C(reset) %C(dim)by %an %ar"

[url "ssh://git@github.com/"]
    insteadOf = https://github.com/

[alias]
    ; --------------------------------------------------------------------------
    ; DIFF ALIASES
    ;
    ; The prefix characters below are used in combination with `d`, the base
    ; alias for diff.
    ;
    ;   w = word
    ;   s = ignore space
    ;   c = cached (staged changes)
    ;
    d   = diff
    wd  = diff --word-diff
    sd  = diff --ignore-all-space
    dc  = diff --cached
    wdc = diff --cached --word-diff
    sdc = diff --cached --ignore-all-space

    ; --------------------------------------------------------------------------
    ; LOGGING ALIASES
    ;
    ; l = log recent commits
    ;
    ;   --first-parent essentially means that the commits "within" a merge
    ;   commit are not shown. It does not affect how non-merge commits are
    ;   displayed. The result is that when viewing the log for "master" (or
    ;   equivalent), you tend to see a list of merged PRs, and on a "regular"
    ;   branch you see the regular commits made on that branch.
    l  = log --max-count 20 --first-parent

    ; lm = log commits "within" a merge commit
    ;
    ;   This is like a companion to the `l` alias. It shows the commits the `l`
    ;   does not, namely those "within" a merge commit. The first commit shown
    ;   is the merge commit itself.
    lm = "!f() { git log \"$1^..$1\"; }; f"

    ; lb = log this branch
    ;
    ;   Shows the commits on the current branch that were made since it diverged
    ;   from the default branch.
    lb = !git log --first-parent $(git diverge-commit)..HEAD

    ; lt = log since tag
    ;
    ;   Shows all commits on the current branch that were made since the last
    ;   tag that points to a commit on this branch (which may not be the latest
    ;   tag chronologically).
    lt = !git log --first-parent ...$(git describe --abbrev=0)~

    ; --------------------------------------------------------------------------
    ; STAGING & COMMITTING ALIASES
    ;
    s   = status --short --branch
    c   = commit
    ca  = commit --amend
    a   = add
    aa  = add --all
    ap  = add --all --patch

    ; unstage
    ;
    ;   Removes staged changes from the cache, the opposite of "add".
    unstage = restore --staged

    ; wip = add a "work in progress commit"
    ;
    ;   I use these commits like a "more severe" version of stash, when
    ;   switching branches or when I need to stop work midway through a large
    ;   change and I'd like to push unfinished changes to origin.
    ;
    ;   I only ever use it on personal "feature" branches, and use the
    ;   "uncommit" alias when I resume work to ensure they don't stay in
    ;   the history.
    wip = "!git add -A && git commit -m 'WIP [ci skip]'"

    ; uncommit = return to a state before the most recent commit
    ;
    ;   --mixed preserves the changes from the most recent commit and leaves
    ;   them unstaged. This a companion alias to the "wip" alias above.
    uncommit = reset HEAD~ --mixed

    ; destroy = eliminate all uncommitted changes
    ;
    ;   Removes all staged and unstaged changes and removes any untracked files.
    destroy = "!echo 'Destroying all uncomitted changes in 3 seconds...' && sleep 3 && git restore --staged . && git restore --worktree . && git clean --force -d"

    ; --------------------------------------------------------------------------
    ; PUSH & PULL ALIASES
    ;
    ; p = push
    ;
    ;   Pushes and sets the upstream to a branch with the same name. I use this
    ;   universally for new and existing branches as I almost never push to a
    ;   remote branch with a different name.
    ;
    ;   I haven't yet been able to find a simple way to do this once when a new
    ;   branch is created. You can't use "git branch --set-upstream-to" unless
    ;   the branch already exists, so I just set the upstream unconditionally on
    ;   every push.
    p  = "!git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)"

    ; p = push tags
    ;
    ;   Pushes the current branch and any unpushed tags that point to the
    ;   current branch.
    pt = push --follow-tags

    ; p = force push
    ;
    ;   I use this semi-frequently on feature branches, after rebasing from
    ;   master, for example. --force-with-lease is a marginally safer form of
    ;   --force that verifies no changes have occurred on the remote since you
    ;   last did a pull/fetch. This will probably stop you blowing away somebody
    ;   else changes, but wont stop you destroying your own! In practice I
    ;   almost never force push to any branch that is used by other people.
    pf = push --force-with-lease

    ; release = create a new tag based on the latest entry in CHANGELOG.md
    ;
    ;   Creates an annotated tag for a release.
    ;
    ;   By default, Git ignores lines in the commit message the start with a
    ;   hash (#), which is unfortunately also the start of a markdown heading.
    ;
    ;   To get around this, I use --cleanup=whitespace, which stops Git from
    ;   treating hash-prefixed lines as comments. By default Git includes some
    ;   hash-prefixed lines in the commit message, which have to be manually
    ;   removed. Setting an empty message and passing --edit prevent these
    ;   lines from being added.
    ;
    ;   If/when git supports the "scissors" cleanup mode for tag commits, I
    ;   would use that instead of this workaround.
    ;
    release = !git tag --annotate --cleanup=whitespace --edit --message \"$(git changelog-tag-message)\" \"$(git changelog-tag-name)\"

    ; --------------------------------------------------------------------------
    ; BRANCHING, MERGING, REBASING, ETC ALIASES
    ;
    b   = branch
    sw  = switch
    nb  = switch --create ; nb = new branch

    ff  = merge --ff-only

    cp  = cherry-pick
    cpc = cherry-pick --continue
    cpa = cherry-pick --abort

    rb  = rebase
    rbc = rebase --continue
    rbs = rebase --skip
    rba = rebase --abort

    ; rbi = rebase interactive
    ;
    ;   Starts an interactive rebase that includes the commits on the current
    ;   branch since it diverged from the default branch.
    rbi = !git rebase --interactive $(git diverge-commit)

    ; swm = switch to master
    ;
    ;   It actually switches to the default branch, it doesn't have to be called
    ;   "master", but this alias is now in my muscle memory and in practice the
    ;   default branch is almost always "master".
    swm = !git switch $(git default-branch)

    ; mb = merged branches
    ;
    ;   Lists the branches that are merged into the default branch.
    mb = !git branch --merged $(git default-branch)

    ; ub = unmerged branches
    ;
    ;   Lists the branches that are NOT merged into the default branch.
    ub = !git branch --no-merged $(git default-branch)

    ; --------------------------------------------------------------------------
    ; HELPER ALIASES
    ;
    ; These are used inside other aliases to avoid repetition.
    default-branch = !basename $(git remote show origin | grep 'HEAD branch:' | cut -d: -f2)
    diverge-commit = !git merge-base $(git default-branch) HEAD
    changelog-tag-name = "!awk '/^## \\[.+\\]/{print \"v\" substr($2, 2, length($2) - 2); exit}' CHANGELOG.md"
    changelog-tag-message = "!awk '/^## \\[.+\\]/{header = 1; count++}; count > 1 {exit}; header == 1 {header = 0; print \"Version \" substr($2, 2, length($2) - 2); next}; count' CHANGELOG.md"
