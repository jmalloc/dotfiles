#!/usr/bin/env bash
set -e
set -o pipefail

################################################################################
## CONFIGURATION
################################################################################

# DOTFILES_REPO_[PUBLIC|PRIVATE] is the name of the public and private dotfiles
# repositories, respectively. The names are given as repository "slugs",
# presumed to be hosted on GitHub.com.
export DOTFILES_REPO_PUBLIC="jmalloc/dotfiles"
export DOTFILES_REPO_PRIVATE="jmalloc/dotfiles-private"

# DOTFILES_BRANCH is the name of the branch to be used on both the dotfiles and
# dotfiles-private repositories.
export DOTFILES_BRANCH="ventura"

# DOTFILES_PATH_[PUBLIC|PRIVATE] are the paths into which the public and private
# repos are cloned, respectively.
#
# Note that I clone these directly into my home directory, not to my standard
# Grit clone path. This allows me to checkout a separate copy there without
# affecting my current machine. The clone in the home directory is still index
# by Grit after running `grit index scan` once manually.
export DOTFILES_PATH_PUBLIC="$HOME/.dotfiles/public"
export DOTFILES_PATH_PRIVATE="$HOME/.dotfiles/private"

################################################################################
### 1PASSWORD CONFIGURATION
################################################################################

# Note that some of the values below are base64 encoded as a primitive measure
# to avoid them being indexed by search engines. They do not have particularly
# sensitive content.

# OP_ACCOUNT is your 1Password account name. If you have a personal account, use
# the string "my".
export OP_ACCOUNT="$(echo 'dGVhbS1hd2t3YXJkCg==' | base64 --decode)"

# OP_ITEM_APPLEID is the name of the *LOGIN* containing your Apple ID.
export OP_ITEM_APPLEID="Apple ID (AU)"

################################################################################
### END OF CONFIGURATION
################################################################################

# Permissions are elevated first to get all interactivity out of the way as soon
# as possible. The -v flag causes sudo to update the credential cache without
# executing a command.
#
# The while loop refreshes the credential cache every 60 seconds until this
# process exits.
echo "Elevating to superuser."
sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

if [ ! -e /opt/homebrew/bin/brew ]; then
    echo "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

eval "$(/opt/homebrew/bin/brew shellenv)"

if [[ ! -d /Applications/1Password.app ]]; then
    echo "Installing 1Password..."
    brew install --cask 1password
fi

if ! hash op 2>/dev/null; then
    echo "Installing 1Password CLI..."
    brew install --cask 1password-cli
fi

echo "First, add your personal 1Password account to the app, then enable the following option(s) in the preferences:"
echo
echo "    - Developer > 1Password SSH Agent > Use the SSH agent"
echo "    - Developer > Command-Line Interface (CLI) > Connect with 1Password CLI"
echo

open "/Applications/1Password.app"

read -p "Have you configured the specified options? [yn] " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo "Unable to continue without configuring 1Password."
    exit 1
fi

until op account get --account="$OP_ACCOUNT" &>/dev/null
do
    echo "1Password CLI session not detected."
    echo "Signing in to 1Password CLI..."
    eval $(op signin --account="$OP_ACCOUNT")
done

if ! hash mas 2>/dev/null; then
    echo "Installing mas..."
    brew install mas
fi

op item get --account="$OP_ACCOUNT" --fields=password "$OP_ITEM_APPLEID" | tr -d '\n' | pbcopy
echo "Sign in to the App Store first. Password has been copied to the clipboard."
mas open
open "x-apple.systempreferences:com.apple.preferences.AppleIDPrefPane"

read -p "Have you signed in? [yn] " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    echo "Unable to continue without being signed in to the App Store."
    exit 1
fi

if [[ -d "$DOTFILES_PATH_PUBLIC" ]]; then
    echo "Pulling $DOTFILES_REPO_PUBLIC..."
    pushd "$DOTFILES_PATH_PUBLIC" > /dev/null
    git pull
    popd > /dev/null
else
    # Note that the repo is cloned using a https URL. This is swapped to an SSH
    # URL after the SSH keys have been successfully retrieved from 1Password.
    echo "Cloning $DOTFILES_REPO_PUBLIC..."
    git clone \
        --branch "$DOTFILES_BRANCH" \
        --single-branch "git@github.com:$DOTFILES_REPO_PUBLIC.git" \
        "$DOTFILES_PATH_PUBLIC"
fi

# Source the public installation files. These should avoid user interaction.
for FILE in "$DOTFILES_PATH_PUBLIC/install.d/"*-*.bash; do
  source "$FILE"
done

# Source the private installation files. The public installation files must have cloned the private dotfiles repo.
# These should avoid user interaction.
for FILE in "$DOTFILES_PATH_PRIVATE/install.d/"*-*.bash; do
  source "$FILE"
done

echo
echo "Done. System must be restarted for some changes to take effect."
