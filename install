#!/usr/bin/env bash
set -e
set -o pipefail

################################################################################
## CONFIGURATION
################################################################################

# DOTFILES_REPO_[PUBLIC|PRIVATE] is the name of the public and private dotfiles
# repositories, respectively. The names are given as repository "slugs",
# presumed to be hosted on GitHub.com.
export DOTFILES_REPO_PUBLIC="jmalloc/dotfiles"
export DOTFILES_REPO_PRIVATE="jmalloc/dotfiles-private"

# DOTFILES_BRANCH is the name of the branch to be used on both the dotfiles and
# dotfiles-private repositories.
export DOTFILES_BRANCH="bigsur"

# DOTFILES_PATH_[PUBLIC|PRIVATE] are the paths into which the public and private
# repos are cloned, respectively.
#
# Note that I clone these directly into my home directory, not to my standard
# Grit clone path. This allows me to checkout a separate copy there without
# affecting my current machine. The clone in the home directory is still index
# by Grit after running `grit index scan` once manually.
export DOTFILES_PATH_PUBLIC="$HOME/.dotfiles/public"
export DOTFILES_PATH_PRIVATE="$HOME/.dotfiles/private"

################################################################################
### 1PASSWORD CONFIGURATION
################################################################################

# Note that some of the values below are base64 encoded as a primitive measure
# to avoid them being indexed by search engines. They do not have particularly
# sensitive content.

# OP_ACCOUNT is your 1Password account name. If you have a personal account, use
# the string "my".
export OP_ACCOUNT="$(echo 'dGVhbV9hd2t3YXJkCg==' | base64 --decode)"

# OP_EMAIL is the email address you used to sign into 1Password within.
export OP_EMAIL="$(echo 'bWFpbGphbWVzaGFycmlzQGdtYWlsLmNvbQo=' | base64 --decode)"

# OP_ITEM_APPLEID is the name of the *LOGIN* containing your Apple ID.
export OP_ITEM_APPLEID="Apple ID (AU)"

# OP_ITEM_SSHKEY is the name of the *DOCUMENT* containing your SSH private key.
# The document must have a "Passphrase" field containing the key's passphrase.
export OP_ITEM_SSHKEY="SSH Private Key"

################################################################################
### END OF CONFIGURATION
################################################################################

# Permissions are elevated first to get all interactivity out of the way as soon
# as possible. The -v flag causes sudo to update the credential cache without
# executing a command.
#
# The while loop refreshes the credential cache every 60 seconds until this
# process exits.
echo "Elevating to superuser."
sudo -v
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

if ! hash brew 2>/dev/null; then
    echo "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

eval "$(/opt/homebrew/bin/brew shellenv)"

if ! hash jq 2>/dev/null; then
    echo "Installing jq..."
    brew install jq
fi

if ! hash mas 2>/dev/null; then
    echo "Installing mas..."
    brew install mas
fi

if ! hash op 2>/dev/null; then
    echo "Installing 1Password CLI..."
    brew cask install 1password-cli
fi

if ! mas account > /dev/null; then
    op get item --account="$OP_ACCOUNT" "$OP_ITEM_APPLEID" | jq --raw-output '.details.fields[]? | select(.designation == "password") | .value' | tr -d '\n' | pbcopy
    echo "Sign in to the App Store first. The password has been copied to the clipboard."
    mas open

    while ! mas account > /dev/null; then
        sleep 5
    fi
fi

while ! op list vaults --account="$OP_ACCOUNT" > /dev/null 2>&1; do
    # Check if the 1Password account is already known to the CLI, and if so use
    # the "short form" sign-in syntax. This prevents the need to re-enter the
    # secret key if it is already known.
    if cat ~/.op/config | jq --exit-status '.accounts | .[] | select(.shorthand == "'"$OP_ACCOUNT"'")' > /dev/null; then
        eval $(op signin "$OP_ACCOUNT")
    else
        eval $(op signin "${OP_ACCOUNT//_/-}.1password.com" "$OP_EMAIL")
    fi
done

if [[ -d "$DOTFILES_PATH_PUBLIC" ]]; then
    echo "Pulling $DOTFILES_REPO_PUBLIC..."
    pushd "$DOTFILES_PATH_PUBLIC" > /dev/null
    git pull
    popd > /dev/null
else
    # Note that the repo is cloned using a https URL. This is swapped to an SSH
    # URL after the SSH keys have been successfully retrieved from 1Password.
    echo "Cloning $DOTFILES_REPO_PUBLIC..."
    git clone \
        --branch "$DOTFILES_BRANCH" \
        --single-branch "https://github.com/$DOTFILES_REPO_PUBLIC.git" \
        "$DOTFILES_PATH_PUBLIC"
fi

# Source the public installation files. These should avoid user interaction.
for FILE in "$DOTFILES_PATH_PUBLIC/install.d/"*-*.bash; do
  source "$FILE"
done

# Source the private installation files. The public installation files must have cloned the private dotfiles repo.
# These should avoid user interaction.
for FILE in "$DOTFILES_PATH_PRIVATE/install.d/"*-*.bash; do
  source "$FILE"
done

echo
echo "Done. System must be restarted for some changes to take effect."
